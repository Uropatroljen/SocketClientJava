/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socketclient;

import java.net.*;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import java.io.*;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }
    public Socket startClient(){
        try{
            Socket socket = new Socket("10.108.130.236",1883);
            System.out.println("Connection open");
            return socket;
        }
        catch(UnknownHostException  e){
            System.out.println("server not found: " + e.getMessage());
        }
        catch(IOException e) {
            System.out.println("Error happend while establishing socket connection: " + e.getMessage());
        }
        return null;
    }

    public void stopClient(Socket socket){
        try{
            socket.close();
        }
        catch(UnknownHostException  e){
            System.out.println("server not found: " + e.getMessage());
        }
        catch(IOException e){
            System.out.println("Error happend while closing socket connection: " +  e.getMessage());
        }
    }

    public byte[] deSerilizeMessage(Command message){
        return message.toByteArray();
    }

    public Command serilizeMessage(InputStream reader){
        try{
            return Command.parseDelimitedFrom(reader);
        }
        catch(IOException e)
        {
            System.out.println("Error happend while parsing message object: " + e.getMessage());
        }
        return null;
    }



    public void sendMessage(byte[] message,Socket socket){
        try{
            OutputStream output = socket.getOutputStream();
            CodedOutputStream coded = CodedOutputStream.newInstance(output);
            coded.writeByteArray(message.length,message);
            coded.flush();
            System.out.println("Message sendt to server: ");
        }
        catch(IOException e){
            System.out.println("Error happend while sending message to the socket server: " + e.getMessage());
        }
    }

    public Command readMessage(Socket socket){
        try{
            CodedInputStream wh = CodedInputStream.newInstance(socket.getInputStream().readAllBytes());
            Command c = Command.parseFrom(wh);
            return c;
        } catch (IOException e) {
            System.out.println("Error happend while reading data from server: " + e.getMessage());
        }
        return null;
    }


    public static void main(String[] args) {
        Light l = Light.newBuilder().setState(false).setRed(255).setBlue(0).setGreen(80).build();
        //Music m = Music.newBuilder().setId(1).setTitle("Lille peter ederkop").build();
        Command c = Command.newBuilder().setCommand("Light").setLight(l).build();
        //Command cm = Command.newBuilder().setCommand("Stop").setMusic(m).build();
        Socket socket = new App().startClient();

        if(socket == null){
            System.out.println("No socket found");
            System.out.println("Client closing"); 
        }
        else{
            byte[] message = new App().deSerilizeMessage(c);
            if(message == null){
                System.out.println("message is empty");
            }
            else{
                new App().sendMessage(message,socket);
                Command receivedMessage = new App().readMessage(socket);
                if(receivedMessage == null){
                    System.out.println("Message was empty");
                }
                else{
                    System.out.println("Message from server: " + receivedMessage.toString());
                }

            }
        }
    }
}
